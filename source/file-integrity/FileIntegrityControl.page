Menu="Integrity"
Title="File Integrity Control"
---
<?PHP
/* Copyright 2012-2020, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$plugin = 'dynamix.file.integrity';
$translations = file_exists("$docroot/webGui/include/Translations.php");
require_once "$docroot/plugins/$plugin/include/Legacy.php";
?>
<?if (!$translations):?>
<?eval('?>'.parse_file("$docroot/plugins/$plugin/FileIntegrityControl.page"))?>
<?else:?>
<?
function data_disks($disk) {
  return $disk['type']=='Data' && strpos($disk['status'],'_NP')===false;
}
if ($var['fsState']=="Stopped") {
  echo "<p class='notice'>"._('Array must be **Started** to use this feature').".</p>";
  echo "<p><input type='button' value='_(Done)_' onclick='done()'></p>";
  return;
}
$cfg = parse_plugin_cfg($plugin);

$folders = $cfg['exclude'] ? explode(',',$cfg['exclude']) : [];
if ($cfg['folders']) $folders = array_merge($folders,array_map('trim',explode(',',$cfg['folders'])));
$folders = $folders ? implode('&nbsp;&nbsp;',$folders) : _('None');

$files = $cfg['files'] ? array_map('trim',explode(',',$cfg['files'])) : [];
$files = $files ? implode(' , ',$files) : _('None');

$size = $cfg['method']=='-b2' ? 128 : ($cfg['method']=='-md5' ? 32 : 64);
$method = $cfg['method']?str_replace(['-b2','-b3','-md5'],[_('BLAKE2'),_('BLAKE3'),_('MD5')],$cfg['method']):_('SHA256');
$root = $cfg['place']=='SystemInformation' ? '/Tools/Integrity' : '/Integrity';
$data = array_filter($disks,'data_disks');

?>
<style>
input.thin{margin:1px;}
span.running{background-color:#FF9E9E;}
span.green-button{padding:1px 4px;margin-right:6px;border-radius:4px;border:1px solid #6FA239;}
span.orange-button{padding:1px 4px;margin-right:6px;border-radius:4px;border:1px solid #FF9900;}
span.red-button{padding:1px 4px;margin-right:6px;border-radius:4px;border:1px solid #CC0000;}
.blue-text{color:#00529B;}
.usage-disk{height:auto}
.usage-disk>span:first-child{height:auto;padding:0}
</style>
<script>
var disks = [];
var bunker = [];

function updater() {
  $.post('/plugins/<?=$plugin?>/include/ProgressInfo.php',{disk:0,time:180},function(data){
    $('#disk-status').html(data);
    $('input[value="_(Find)_"]').prop('disabled',$('#export-status').html().search('green-text')==-1);
    setTimeout(updater,3000);
  });
}
function monitor(cmd,disk) {
  $.post('/plugins/<?=$plugin?>/include/ProgressInfo.php',{disk:disk},function(data) {
    data = data.split('#');
    $('#disk'+disk).animate({width:data[0]},{step:function(){$('#disk'+disk).css('overflow','visible');}}).text(data[0]);
    $('#count'+disk).html(data[1]);
    if (data[0] == '100%') {
      $('#eta'+disk).remove();
      $('#button'+disk).remove();
      $('#count'+disk).attr('colSpan','3');
      updateList(false,'disk'+disk);
      prepareList(cmd);
      $('input[name="disk'+disk+'"]').prop('disabled',false).prop('checked',false);
    } else {
      $('#eta'+disk).html(data[2]);
      $('#button'+disk).html("<input type='button' style='margin:0' value='_(Cancel)_' onclick='cancelBunker(\""+cmd+"\","+disk+")'>");
      bunker[disk] = setTimeout('monitor("'+cmd+'",'+disk+')',3000);
    }
  });
}
function cancelBunker(cmd,disk) {
  $.post('/plugins/<?=$plugin?>/include/BunkerProcess.php',{cmd:cmd,disk:disk,kill:'true'},function(data) {
    updateList(false,'disk'+disk);
    prepareList(cmd);
    location = location;
  });
}
function updateList(checked,name) {
  var disk = name.substr(4);
  if (checked) disks.push(disk); else disks.splice(disks.indexOf(disk),1);
  $('input[type=submit]').not('input[name^="#"]').prop('disabled',disks.length==0);
  $('input[value=_(Corz)_]').prop('disabled',disks.length==0);
  if (disks.length==0) $.removeCookie('disks',{path:'/'});
}
function prepareList(cmd) {
  var cookies = $.cookie('disks')!=null ? $.cookie('disks').split(',') : [];
  var list = '';
  for (var i=0,disk; disk=disks[i]; i++) {
    if (list.length) list += ',';
    for (var x=0,cookie; cookie=cookies[x]; x++) {if (disk==cookie.substr(1)) break;}
    list += (x==cookies.length ? cmd+disk : cookies[x]);
  }
  if (list.length > 0) $.cookie('disks',list,{path:'/',expires:3650});
}
function checkAll(checked) {
  $('input[class=selection]').each(function() {
    var checkbox = $(this);
    if (checkbox.prop('disabled')==false) {
      checkbox.prop('checked',checked);
      updateList(checked,checkbox.attr('name'));
    }
  });
}
function duplicates() {
  var args = '&arg1=<?=$size?>';
  args += $('#export-status').html().search(/(blue|orange)-text/)>=0 ? '&arg2=part' : '&arg2=';
  args += $('input[name="#more"]').prop('checked') ? '&arg3=more' : '&arg3=';
  openBox('/plugins/<?=$plugin?>/scripts/duplicates'+args,'_(File Duplicates Check)_',490,430,false);
}
function corz() {
  var args = '&arg1=';
  $('input[class="selection"]').each(function() {
    if ($(this).prop('checked')) args += $(this).attr('name')+',';
  });
  openBox('/plugins/<?=$plugin?>/scripts/corzation'+args.slice(0,-1)+'&arg2=<?=$method?>','_(Generate Corz Files)_',490,430,false);
}
$(function() {
  updater();
  if ($.cookie('disks') != null) {
    var cookies = $.cookie('disks').split(',');
    for (var i=0,cookie; cookie=cookies[i]; i++) {
      var cmd = cookie.substr(0,1);
      var disk = cookie.substr(1);
      disks.push(disk);
      $('input[name="disk'+disk+'"]').prop('disabled',true).prop('checked',true);
      $('#row'+disk).show();
      bunker[disk] = setTimeout('monitor("'+cmd+'",'+disk+')',500);
    }
  } else {
    $('input[type=submit]').not('input[name^="#"]').prop('disabled',true);
    $('input[value=Corz]').prop('disabled',true);
  }
<?if (function_exists('plugin_update_available') && $version = plugin_update_available($plugin)):?>
  showNotice('_(Dynamix File Integrity)_ <b><?=$version?></b> _(is available)_. <a>_(Download Now)_</a>','<?=$plugin?>');
<?endif;?>
  setTimeout(function(){$('#delayed').html("<input type='checkbox' onchange='checkAll(this.checked)'>_(Toggle all)_");},200);
});
</script>
<div style="float:right">
 <span style="font-style:italic;display:block;text-align:right">_(hash files)_ &nbsp;<a href="<?=$root?>/Browse?dir=/boot/config/plugins/<?=$plugin?>/export"><img src="/webGui/images/explore.png"></a></span><br>
 <span style="font-style:italic;display:block;text-align:right">_(log files)_ &nbsp;<a href="<?=$root?>/Browse?dir=/boot/config/plugins/<?=$plugin?>/logs"><img src="/webGui/images/explore.png"></a></span><br>
 <span style="font-style:italic;display:block;text-align:right">_(saved files)_ &nbsp;<a href="<?=$root?>/Browse?dir=/boot/config/plugins/<?=$plugin?>/saved"><img src="/webGui/images/explore.png"></a></span>
 </div>

<form markdown="1" name="integrity_control" method="POST" action="/update.php" target="progressFrame" onsubmit="prepareList(this.x.value)">
<input type="hidden" name="#file" value="not-used">
<input type="hidden" name="#method" value="<?=$cfg['method']?>">
<input type="hidden" name="#exclude" value="<?=$cfg['exclude']?>">
<input type="hidden" name="#folders" value="<?=$cfg['folders']?>">
<input type="hidden" name="#files" value="<?=$cfg['files']?>">
<input type="hidden" name="#apple" value="<?=$cfg['apple']?>">
<input type="hidden" name="#notify" value="<?=$cfg['notify']?>">
<input type="hidden" name="#priority" value="<?=$cfg['priority']?>">
<input type="hidden" name="#log" value="<?=$cfg['log']?>">
<input type="hidden" name="#include" value="plugins/<?=$plugin?>/include/update.control.php">
<input type="hidden" name="x" value="">
_(Hashing method)_:
: <span style='font-size:12px;margin-right:8px'><?=$method?></span>

:integrity_control_hashing_plug:
> This is the hash method as selected on the settings page. Make sure it is correct before you perform any commands on this page.
:end

_(Excluded folders)_:
: <span style='font-size:12px'><?=$folders?></span>

:integrity_control_folders_plug:
> This is the list of excluded folders as selected on the settings page. Make sure it is correct before you perform any commands on this page.
:end

_(Excluded files)_:
: <span style='font-size:12px'><?=$files?></span>

:integrity_control_files_plug:
> This is the list of excluded files as selected on the settings page. Make sure it is correct before you perform any commands on this page.
:end

<?
$row1 = $row2 = [];
foreach ($data as $disk) {
  $row1[] = "<td>"._('Disk')."<br>{$disk['idx']}</td>";
  $row2[] = "<td><input type='checkbox' name='{$disk['name']}' class='selection' onchange='updateList(this.checked,this.name)'></td>";
}
$x = 28-count($row1);
echo "<table class='share_status fixed' style='margin:20px 0'><thead><tr><td id='delayed' style='width:10%'></td>";
echo implode('',$row1);
echo str_repeat("<td>-</td>", $x);
echo "</tr></thead><tbody><tr><td style='font-weight:bold'>"._('Disk selection')."</td>";
echo implode('',$row2);
echo str_repeat("<td></td>", $x);
echo "</tr></tbody><tbody id='disk-status'></tbody></table>";
?>

:integrity_control_overview_plug:
> Select the disks which you want to let participate in any of the commands below. You can execute a command multiple times with different selections.
>
> For each disk the build and export state is maintained in near real-time.
>
> + *Build up-to-date* indicates per disk whether the build is complete or some files do not have the extended attributes set yet. A manual build will update the missing files.
> + *Export up-to-date* indicates per disk whether the export file contains all files or some files are missing. A manual export will make the export file complete.
>
> The used symbols have the following meaning:
>
> + <span class='orange-text'><i class='fa fa-circle-o icon'></i></span> represents an open operation
> + <span class='green-text'><i class='fa fa-check icon'></i></span> represents a completed operation
> + <span class='blue-text'><i class='fa fa-close icon'></i></span> represents a disabled operation (related export file is not present)
>
> Use the **Build** command to do the initial set up and select which disks to include. All selected disks are processed in parallel to decrease run-time, but at increased processor load.
> Building can be done in intermediate steps, files which have their extended attributes set, will be skipped when a next build is performed.
>
> Use the **Export** command to generate checksum files which can be used for manual checking or restoration.
> These files are stored on the flash disk under */config/plugins/dynamix.file.integrity/diskXX.export.hash*
>
> Use the **Check** command to verify files against a previously exported file. This allows for off-line verification in case of a local issue and the extended attributes can't be used.
>
> Use the **Import** command to restore the extended attributes from a previously exported file. This *should* only be necessary in case the extended attributes got corrupted or went missing.
>
> Use the **Remove** command to delete the extended attributes which are stored with the file. This makes the system see such files as unprocessed.
>
> Use the **Clear** command to delete the extended attributes from excluded folders and files only.
>
> Use the **Corz** command to convert the export files to Corz compatible files. Corz files are created for each folder and stored under name *&lt;disk&gt;.corz&lt;/full-path-name&gt;.hash*.
>
> Use the **Find** command to search for duplicate file names and file hashes in the exported *hash* files.
:end

&nbsp;
: <input type="submit" name="cmd" value="_(Build)_"  onclick="this.form.x.value='a'">
  <input type="submit" name="cmd" value="_(Export)_" onclick="this.form.x.value='e'">
  <input type="submit" name="cmd" value="_(Check)_"  onclick="this.form.x.value='C'">
  <input type="submit" name="cmd" value="_(Import)_" onclick="this.form.x.value='i'">
  <input type="submit" name="cmd" value="_(Remove)_" onclick="this.form.x.value='R'">
  <input type="submit" name="cmd" value="_(Clear)_"  onclick="this.form.x.value='R'">
  <input type="button" value="_(Corz)_" onclick="corz()">
  <input type="button" value="_(Find)_" onclick="duplicates()">
<?if ($cfg['place']=='SystemInformation'):?>
  <input type="button" value="_(Done)_" class="lock" onclick="done()">
<?endif;?>
<span class="small" style="float:right">_(Include duplicate file hashes in **Find** command)_ &nbsp;<input type='checkbox' name='#more'></span>
</form>

<table class='tablesorter'>
<thead style='visibility:hidden'><tr><th style='width:56px'></th><th style='width:330px'></th><th></th><th></th><th style='width:50px'></th></tr></thead>
</tbody>
<?foreach ($data as $disk):?>
<tr id='row<?=$disk['idx']?>' style='display:none'><td><?=_(my_disk($disk['name']),3)?></td><td><div class='usage-disk'><span id='<?=$disk['name']?>' style='width:0'></span></div></td><td id='count<?=$disk['idx']?>'></td><td id='eta<?=$disk['idx']?>'></td><td id='button<?=$disk['idx']?>'></td></tr>
<?endforeach;?>
</tbody>
</table>
<?endif;?>
