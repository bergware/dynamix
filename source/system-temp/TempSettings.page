Menu="Utilities"
Title="System Temp"
Icon="thermometer"
Tag="thermometer"
---
<?PHP
/* Copyright 2012-2020, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * Plugin development contribution by gfjardim
 */
?>
<?
$plugin = 'dynamix.system.temp';
$translations = file_exists("$docroot/webGui/include/Translations.php");
require_once "$docroot/plugins/$plugin/include/Legacy.php";
?>
<?if (!$translations):?>
<?eval('?>'.parse_file("$docroot/plugins/$plugin/TempSettings.page"))?>
<?else:?>
<?
$sensors_file  = "/boot/config/plugins/dynamix.system.temp/sensors.conf";
$drivers_file  = "/boot/config/plugins/dynamix.system.temp/drivers.conf";
$settings_file = "/etc/sensors.d/sensors.conf";

$unit  = $display['unit'];
$dot   = $display['number'][0];
$perl  = exec("which perl 2>/dev/null");
$width = strstr('gray,azure',$display['theme']) ? 305:300;

function get_sensors() {
  global $settings_file;
  $out = [];
  $tmp = '/tmp/sensors.conf';
  exec("grep -v 'ignore' $settings_file > $tmp");
  preg_match_all("/(.*?)\nAdapter:.*?\n(.*?)(?:[\n]{2,})/smi", shell_exec("sensors -u -c $tmp"), $controllers);
  foreach ($controllers[1] as $key => $controller) {
    preg_match_all("/(.*):\n\s+([^:]*): (.*)/", $controllers[2][$key], $matches);
    for ($i=0; $i<count($matches[1]); $i++) {
      $out[] = array(
        'ctrl' => $controller,
        'name' => $matches[1][$i],
        'attr' => $matches[2][$i],
        'val'  => $matches[3][$i]
      );
    }
  }
  unlink($tmp);
  return $out;
}
function get_modules() {
  global $drivers_file;
  return file_exists($drivers_file) ? file($drivers_file) : [];
}
function save_modules($modules) {
  global $drivers_file;
  if ($modules) file_put_contents($drivers_file, preg_replace("/\s|,/", "\n", $modules)); else @unlink($drivers_file);
}
function is_module_loaded($module) {
  return exec("lsmod|grep -cm1 '^$module'")>0;
}
function load_module($module) {
  if (!is_module_loaded($module)) exec("modprobe $module");
}
function unload_module($module) {
  if (is_module_loaded($module)) exec("modprobe -r $module");
}
switch ($_POST['tag']) {
case 'sensors':
  file_put_contents('/tmp/post',print_r($_POST,true));
  if ($_POST['rescan']) break;
  $content = "# sensors\n";
  $probes = "";
  foreach ($_POST as $key => $value) {
    switch ($key) {
    case 'mb_temp':
    case 'cpu0_temp':
    case 'cpu1_temp':
      [$chip, $input, $label] = explode("|", $value = preg_match("/.*?\|.*?\|.*?/",$value) ? $value : "||");
      $content .= strlen($chip) ? sprintf("chip \"%s\"\nlabel \"%s\" \"%s\"\n", $chip, $input, $label) : "";
      break;
    case 'array_fan':
      foreach (explode(',',$value) as $fan) {
        [$chip, $input, $label] = explode("|", $fan = preg_match("/.*?\|.*?\|.*?/",$fan) ? $fan : "||");
        $content .= strlen($chip) ? sprintf("chip \"%s\"\nlabel \"%s\" \"%s\"\n", $chip, $input, $label) : "";
      }
      break;
    case 'temp_ignore':
    case 'fan_ignore':
      foreach (explode('#', $value) as $ignore) {
        if (!$ignore) continue;
        [$chip, $input] = explode("|", $ignore);
        $content .= sprintf("chip \"%s\"\nignore \"%s\"\n", $chip, $input);
      }
      break;
    }
  }
  file_put_contents($sensors_file, $content);
  copy($sensors_file, $settings_file);
  break;
case 'modules':
  foreach ($_POST as $key => $value) {
    switch ($key) {
    case 'save':
      save_modules($_POST['drivers']);
      break;
    case 'load':
      foreach (get_modules() as $module) load_module($module);
      break;
    case 'unload':
      foreach (get_modules() as $module) unload_module($module);
      break;
    }
  }
  break;
}

$sensors = get_sensors();
if (!$all_modules) $all_modules = implode(" ",get_modules());
$disabled = file_exists($drivers_file) ? "" : "disabled";

$mb_options  = "<option>_(Not used)_</option>";
$cpu0_options = "<option>_(Not used)_</option>";
$cpu1_options = "<option>_(Not used)_</option>";
$fan_options = "";
$temp_ignore = "";
$fan_ignore  = "";

foreach ($sensors as $value) {
  if (preg_match("/temp\d+_input/", $value['attr'])) {
    preg_match("/(\d+\.\d)/", $value['val'], $temp);
    $input = explode("_", $value['attr'])[0];
    $temp= $temp[1];
    if ($temp==0) {
      if ($temp_ignore) $temp_ignore .= '#';
      $temp_ignore .= "{$value['ctrl']}|$input";
    } else {
      $temp = str_replace('.',$dot,$unit=='C' ? $temp : round(9/5*$temp+32));
      $chip = explode("-", $value['ctrl'])[0];
      $mb_options .= mk_option(1,sprintf('%s|%s|MB Temp',$value['ctrl'],$input),sprintf('%s - %s - %s &deg;%s', $chip,$value['name'],$temp,$unit),$value['name']=='MB Temp'?'selected':'');
      $cpu0_options .= mk_option(1,sprintf('%s|%s|CPU0 Temp',$value['ctrl'],$input),sprintf('%s - %s - %s &deg;%s', $chip,$value['name'],$temp,$unit),$value['name']=='CPU0 Temp'?'selected':'');
      $cpu1_options .= mk_option(1,sprintf('%s|%s|CPU1 Temp',$value['ctrl'],$input),sprintf('%s - %s - %s &deg;%s', $chip,$value['name'],$temp,$unit),$value['name']=='CPU1 Temp'?'selected':'');
    }
  } else if (preg_match("/fan\d+_input/", $value['attr'])) {
    preg_match("/(\d+)/", $value['val'], $rpm);
    $input = explode("_", $value['attr'])[0];
    $rpm = $rpm[1];
    if ($rpm==0) {
      if ($fan_ignore) $fan_ignore .= '#';
      $fan_ignore .= "{$value['ctrl']}|$input";
    } else {
      $chip = explode("-", $value['ctrl'])[0];
      $fan_options .= mk_option(1,sprintf('%s|%s|Array Fan',$value['ctrl'],$input),sprintf('%s - %s - %s RPM',$chip,$value['name'],$rpm),$value['name']=='Array Fan'?'selected':'');
    }
  }
}
?>
<style>
select.align{min-width:300px;max-width:300}
select.hide{display:none}
</style>
<script>
function arrayFan(form) {
  var array_fan = [];
  for (var i=0,item; item=form.array_fan.options[i]; i++) {
    if (item.selected) {
      array_fan.push(item.value);
      item.selected = false;
    }
  }
  item = form.array_fan.options[0];
  item.value = array_fan.join(',');
  item.selected = true;
}
function detectModules() {
  $('div.spinner').show();
  $.get('/plugins/<?=$plugin?>/include/DetectModules.php',function(data){
    $('div.spinner').hide();
    $('input[name="drivers"]').val(data).prop('placeholder',data ? '_(Click DETECT)_' : '_(No drivers detected)_');
    $('input[name="save"]').prop('disabled',data=='');
  });
}
$(function() {
  $('#s1').dropdownchecklist({emptyText:'_(None)_', width:<?=$width?>, explicitClose:'..._(close)_'});
  $('input[name="save"]').prop('disabled',$('input[name="drivers"]').val()=='');
<?if (!$perl):?>
  $('input#detect').prop('disabled',true);
<?endif;?>
});
</script>

<div class='spinner' style='display:none'></div>

<form markdown="1" method="POST">
<input type="hidden" name="tag" value="modules">
_(Available drivers)_:
: <input type="text" name="drivers" value="<?=$all_modules?>" placeholder="_(Click DETECT)_">

:temp_drivers_plug:
> Use 'detect' to search for available drivers using the 'sensors-detect' script. After detection proceed with saving the list.<br>
> Use 'save' to store the drivers list to disk, the drivers field may be edited before saving (e.g. add a non-specified driver). Saving is mandatory.<br>
> Use 'load drivers / unload drivers' to manually load or unload the available driver modules.
:end

&nbsp;
<?$loaded = true; foreach (get_modules() as $module) $loaded &= is_module_loaded($module)?>
: <input type="button" id="detect" value="_(Detect)_" onclick="detectModules()"><input type="submit" name="save" value="_(Save)_">
  <?echo ($loaded) ? "<input type='submit' name='unload' id='btn1' value='"._('Unload drivers')."' $disabled>" : "<input type='submit' name='load' id='btn1' value='"._('Load drivers')."' $disabled>"?>
  <?if (!$perl):?><span class="orange-text">_(**Perl** must be installed to do automated driver detection)_</span><?endif;?>
</form>

<div id="title"><span class="left"><i class="fa fa-compass icon"></i>_(Sensors)_</span></div>

<form markdown="1" method="POST" onsubmit="arrayFan(this)">
<input type="hidden" name="tag" value="sensors">
<input type="hidden" name="temp_ignore" value="<?=$temp_ignore?>">
<input type="hidden" name="fan_ignore" value="<?=$fan_ignore?>">
_(Processor 0 temperature)_:
: <select name="cpu0_temp" <?=$disabled?> class="align">
  <?=$cpu0_options?>
  </select>

:temp_processor0_plug:
> Select one of the available probes as the processor temperature indicator.
> The output of this probe is shown at the bottom of the page.
> Select 'Not used' to suppress display of this probe.
:end

_(Processor 1 temperature)_:
: <select name="cpu1_temp" <?=$disabled?> class="align">
  <?=$cpu1_options?>
  </select>

:temp_processor1_plug:
> Select one of the available probes as the processor temperature indicator.
> The output of this probe is shown at the bottom of the page.
> Select 'Not used' to suppress display of this probe.
:end

_(Mainboard temperature)_:
: <select name="mb_temp" <?=$disabled?> class="align">
  <?=$mb_options?>
  </select>

:temp_mainboard_plug:
> Select one of the available probes as the mainboard temperature indicator.
> The output of this probe is shown at the bottom of the page.
> Select 'Not used' to suppress display of this probe.
:end

_(Array fan speed)_:
: <select id="s1" name="array_fan" class="hide" multiple>
  <?=$fan_options?>
  </select>

:temp_fan_plug:
> Select one of the available probes as the array fan speed indicator.
> The output of this probe is shown at the bottom of the page.
> Select 'Not used' to suppress display of this probe.
:end

&nbsp;
: <input type="submit" value="_(Apply)_"><input type="button" value="_(Done)_" onclick="done()"><?if (!$disabled):?><input type="submit" name="rescan" value="_(Rescan)_"><?endif;?>

:temp_rescan_plug:
> 'Rescan' refreshes the selection list and can be used when new probes are available, e.g. a new fan probe has been installed.
:end

</form>
<?endif;?>
